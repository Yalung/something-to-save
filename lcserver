/* 
 *  Only for linux x86_64 and gcc!!!
 *  
 *  yalung929@gmail.com 
 *  2014.3 F1 Bantian Shenzhen China 
 */


#ifndef LCSERVER_H
#define LCSERVER_H

#include "network.h"
#include "common.h"
#include "pool.h"
#include <pthread.h>
#include "event.h"

/*
 *  A TCP Server Frame 
 *
 *  Master worker accepts connection, and assigns it to slave workers by RR policy or user-defined policy. 
 * 
*/

struct lcserver;
struct lcs_worker;

/* config */
typedef struct lcs_config {

	port_t port;		/* listen port */

	char *ip;		/* ip to bind, set as NULL to bind INADDR_ANY */

	int slave_num;		/* how many threads to handle connections */

	int max_conn;		/* max connections this server can handle */

} lcs_config_t;

typedef int lcs_worker_idx;

typedef struct lcs_conn {

	ev_event_t event;

	sock_t s;

	ip_addr_t peer_ip;
	port_t peer_port;

	lcs_worker_idx idx;
	struct lcs_worker *worker;

	void *user_ptr;
} lcs_conn_t;

/* 
 *  return false to close connection. 
 *
 *  conn.idx set to less then zero to use default RR policy.
 *  otherwise conn.idx is worker id
 */
typedef bool(*lcs_callback_t) (lcs_conn_t * conn);

typedef struct lcs_worker {
	pthread_t tid;

	int worker_id;

	struct lcserver *server;

	ev_context_t *event_context;
} lcs_worker_t;

typedef struct lcserver {

	int32_t ip;
	port_t port;
	int slave_num;

	sock_t listen_sock;

	lcs_worker_t master;
	lcs_worker_t *slave;
	int next_slave;

	volatile int stopped;

	/* call when new connection */
	lcs_callback_t accept;

	/* call when data readable */
	lcs_callback_t read;

	int max_conn;

	pool_t *conn_pool;
	pthread_spinlock_t conn_pool_lock;

} lcserver_t;

/* alloc all resource used by server */
lcserver_t *lcserver_create(lcs_config_t * cfg);

/* cleanup resource */
void lcserver_destroy(lcserver_t * server);

/* register accept callback function before start */
void lcserver_register_accept(lcserver_t * server, lcs_callback_t accept);

/* register read callback function before start */
void lcserver_register_read(lcserver_t * server, lcs_callback_t read);

/* start listen socket and all threads */
int lcserver_start(lcserver_t * server);

/* stop */
void lcserver_stop(lcserver_t * server);

#endif
